Multiple Window Handle :

Set<String> handle = driver.getWindowHandles();
Iterator<String> it = handle.iterator();

String parentWinId = it.next();
String childWinId = it.next();

driver.switchTo().window(childWinId);
driver.switchTo().window(parentWinId);
======================================================================================================
Alert Handling (Alert Class)

Alert alert = driver.switchTo().alert();
alert.getText();
alert.accept();
alert.dismiss();

Frame Handling
driver.switchTo().frame(frameIndex or framename)
======================================================================================================
Workbook book;
Sheet sheet;

public static void getTestData(String sheetName){
try{
FileInputStream file = new FileInputStream("FilePath");
}catch (Exception e){
e.printStackTrace();
}try{
book = WorkbookFactory.create(file);
}catch (Exception e){
e.printStackTrace();
}
sheet = book.getSheet("SheetName");
Object[][] data = new Object[sheet.getLastRowNum()][sheet.getRow(0).getLastCellNum()];
for(int i =0;i<sheet.getLastRowNum();i++){
for(int j=0;j<sheet.getRow(0).getLastCellNum();j++){
data[i][j] = sheet.getRow(i+1).getCell(j).toString();
}
}
return data;
}

@DataProvider
public Object[][] getTestData(){
Object data[][] = TestUtils.getTestData("Login");
return data;
}

@Test(dataProvider="getTestData")
public static void(String UN, String Pwd){

}

======================================================================================================

Connection con;
Statement stmt;
ResultSet rs;

String dbUrl = "URL";
String query = "query";
con = DriverManager.getConnection(url,"UN","PWD");
stmt.createConnection();
rs = stmt.executeQuery(query);
while(rs.next()){
}

======================================================================================================

Implicit Wait();

driver.manage().timeouts.implicitlyWait(Duration.ofSeconds(20));

ExplicitWait();

Wait<WebDriver> wait = new WebDriverWait(driver,Duration.ofSeconds(20));
wait.Until(ExpectedConditions.visibilityOfElementsToBeLocated(element));

Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
        .withTimeout(30, SECONDS)
        .pollingEvery(5, SECONDS)
        .ignoring(NoSuchElementException.class);

    WebElement foo = wait.until(new Function<WebDriver, WebElement>() {
      public WebElement apply(WebDriver driver) {
        return driver.findElement(By.id("foo"));
      }
    });

======================================================================================================

Take Screenshots:

Method 1: Take screenshot of particular element

WebElement ele = driver.findElement(By.Id("username"));
File src = ele.getScreenshotAs(OutputType.FILE);
FileUtils.copyFile("src",new File("path"));

Method 2 : Take Screenshot for complete page

TakesScreenshot tkss = (TakesScreenshot)driver;
File srcFile = tkss.getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(tkss,new File("path"));

======================================================================================================

Comparator vs Comparable

Comparator - If we want to specifiy our own logic to sort then we need to use comparator
             Comparator is a functional interface, it has a method-> int compare(T o1,T o2)
Comparable - If we want to give power to class to compare itself we use comparable
             Comparable is also an Interface which has method -> int compareTo()

======================================================================================================

== vs .equals()

== -> is an operator, it compares the memory address and references of an object. This is mainly used for all primitive data types
.equals() -> is a method, it compares the actual value of an object. this is mainly used for all objects other than primitive data types

======================================================================================================

RestAssured Syntax :

Response response = SerenityRest.given().
                    baseUri("baseurl").
                    headers(map).
                    when().
                    body(map).
                    post(endPoints);

JsonPath.read(response.asString(),"$..itemNumber");

Validatable Response = given().baseUri("url")
                       .when()
                       .headers(map)
                       .post(endpoints)
                       .then()
                       .assertThat()
                       .statusCode(200);



driver.manage().timeouts().implicitelyWait(Duration.ofSeconds(20));

Wait<WebDriver> wait = new WebDriverWait(driver,Duration.ofSeconds(20))>;
wait.until(expectedConditions.elementToBeClickable());

Wait<Webdriver> wait = new FluentWait<>(driver)
                        .withTimeout(Duration.ofSeconds(10))
                       .pollingEvery(Duration.ofSeconds(2))
                       .ignoringAll(Exception.class);
Webelement ele = wait.until(new Function<WebDriver,WebElement>(){
public WebElement apply (WebDriver driver){
return driver.findElement(By.id(""));
}
}










